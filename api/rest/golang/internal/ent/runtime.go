// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"version1-workspace/ws-01-000-real-todo/internal/ent/project"
	"version1-workspace/ws-01-000-real-todo/internal/ent/schema"
	"version1-workspace/ws-01-000-real-todo/internal/ent/task"
	"version1-workspace/ws-01-000-real-todo/internal/ent/user"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescUUID is the schema descriptor for uuid field.
	projectDescUUID := projectFields[0].Descriptor()
	// project.DefaultUUID holds the default value on creation for the uuid field.
	project.DefaultUUID = projectDescUUID.Default.(func() uuid.UUID)
	// projectDescSlug is the schema descriptor for slug field.
	projectDescSlug := projectFields[1].Descriptor()
	// project.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	project.SlugValidator = projectDescSlug.Validators[0].(func(string) error)
	// projectDescName is the schema descriptor for name field.
	projectDescName := projectFields[2].Descriptor()
	// project.NameValidator is a validator for the "name" field. It is called by the builders before save.
	project.NameValidator = projectDescName.Validators[0].(func(string) error)
	// projectDescUserID is the schema descriptor for user_id field.
	projectDescUserID := projectFields[3].Descriptor()
	// project.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	project.UserIDValidator = projectDescUserID.Validators[0].(func(int) error)
	// projectDescGoal is the schema descriptor for goal field.
	projectDescGoal := projectFields[4].Descriptor()
	// project.GoalValidator is a validator for the "goal" field. It is called by the builders before save.
	project.GoalValidator = projectDescGoal.Validators[0].(func(string) error)
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectFields[12].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() time.Time)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectFields[13].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() time.Time)
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescUUID is the schema descriptor for uuid field.
	taskDescUUID := taskFields[0].Descriptor()
	// task.DefaultUUID holds the default value on creation for the uuid field.
	task.DefaultUUID = taskDescUUID.Default.(func() uuid.UUID)
	// taskDescCreatedAt is the schema descriptor for created_at field.
	taskDescCreatedAt := taskFields[1].Descriptor()
	// task.DefaultCreatedAt holds the default value on creation for the created_at field.
	task.DefaultCreatedAt = taskDescCreatedAt.Default.(func() time.Time)
	// taskDescUpdatedAt is the schema descriptor for updated_at field.
	taskDescUpdatedAt := taskFields[2].Descriptor()
	// task.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	task.DefaultUpdatedAt = taskDescUpdatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUUID is the schema descriptor for uuid field.
	userDescUUID := userFields[0].Descriptor()
	// user.DefaultUUID holds the default value on creation for the uuid field.
	user.DefaultUUID = userDescUUID.Default.(func() uuid.UUID)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPasswordDigest is the schema descriptor for password_digest field.
	userDescPasswordDigest := userFields[3].Descriptor()
	// user.PasswordDigestValidator is a validator for the "password_digest" field. It is called by the builders before save.
	user.PasswordDigestValidator = userDescPasswordDigest.Validators[0].(func(string) error)
	// userDescRefreshToken is the schema descriptor for refresh_token field.
	userDescRefreshToken := userFields[4].Descriptor()
	// user.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	user.RefreshTokenValidator = userDescRefreshToken.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
}
