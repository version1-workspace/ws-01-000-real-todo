// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"version1-workspace/ws-01-000-real-todo/internal/ent/predicate"
	"version1-workspace/ws-01-000-real-todo/internal/ent/project"
	"version1-workspace/ws-01-000-real-todo/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUUID sets the "uuid" field.
func (pu *ProjectUpdate) SetUUID(u uuid.UUID) *ProjectUpdate {
	pu.mutation.SetUUID(u)
	return pu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUUID(u *uuid.UUID) *ProjectUpdate {
	if u != nil {
		pu.SetUUID(*u)
	}
	return pu
}

// SetSlug sets the "slug" field.
func (pu *ProjectUpdate) SetSlug(s string) *ProjectUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableSlug(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetSlug(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *ProjectUpdate) SetUserID(i int) *ProjectUpdate {
	pu.mutation.ResetUserID()
	pu.mutation.SetUserID(i)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUserID(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetUserID(*i)
	}
	return pu
}

// AddUserID adds i to the "user_id" field.
func (pu *ProjectUpdate) AddUserID(i int) *ProjectUpdate {
	pu.mutation.AddUserID(i)
	return pu
}

// SetGoal sets the "goal" field.
func (pu *ProjectUpdate) SetGoal(s string) *ProjectUpdate {
	pu.mutation.SetGoal(s)
	return pu
}

// SetNillableGoal sets the "goal" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGoal(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGoal(*s)
	}
	return pu
}

// SetShouldbe sets the "shouldbe" field.
func (pu *ProjectUpdate) SetShouldbe(s string) *ProjectUpdate {
	pu.mutation.SetShouldbe(s)
	return pu
}

// SetNillableShouldbe sets the "shouldbe" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableShouldbe(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetShouldbe(*s)
	}
	return pu
}

// ClearShouldbe clears the value of the "shouldbe" field.
func (pu *ProjectUpdate) ClearShouldbe() *ProjectUpdate {
	pu.mutation.ClearShouldbe()
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProjectUpdate) SetStatus(pr project.Status) *ProjectUpdate {
	pu.mutation.SetStatus(pr)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStatus(pr *project.Status) *ProjectUpdate {
	if pr != nil {
		pu.SetStatus(*pr)
	}
	return pu
}

// SetDeadline sets the "deadline" field.
func (pu *ProjectUpdate) SetDeadline(t time.Time) *ProjectUpdate {
	pu.mutation.SetDeadline(t)
	return pu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDeadline(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetDeadline(*t)
	}
	return pu
}

// SetStartingAt sets the "starting_at" field.
func (pu *ProjectUpdate) SetStartingAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetStartingAt(t)
	return pu
}

// SetNillableStartingAt sets the "starting_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStartingAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetStartingAt(*t)
	}
	return pu
}

// ClearStartingAt clears the value of the "starting_at" field.
func (pu *ProjectUpdate) ClearStartingAt() *ProjectUpdate {
	pu.mutation.ClearStartingAt()
	return pu
}

// SetStartedAt sets the "started_at" field.
func (pu *ProjectUpdate) SetStartedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetStartedAt(t)
	return pu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStartedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetStartedAt(*t)
	}
	return pu
}

// ClearStartedAt clears the value of the "started_at" field.
func (pu *ProjectUpdate) ClearStartedAt() *ProjectUpdate {
	pu.mutation.ClearStartedAt()
	return pu
}

// SetFinishedAt sets the "finished_at" field.
func (pu *ProjectUpdate) SetFinishedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetFinishedAt(t)
	return pu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableFinishedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetFinishedAt(*t)
	}
	return pu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (pu *ProjectUpdate) ClearFinishedAt() *ProjectUpdate {
	pu.mutation.ClearFinishedAt()
	return pu
}

// SetArchivedAt sets the "archived_at" field.
func (pu *ProjectUpdate) SetArchivedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetArchivedAt(t)
	return pu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableArchivedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetArchivedAt(*t)
	}
	return pu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (pu *ProjectUpdate) ClearArchivedAt() *ProjectUpdate {
	pu.mutation.ClearArchivedAt()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUpdatedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (pu *ProjectUpdate) SetUsersID(id int) *ProjectUpdate {
	pu.mutation.SetUsersID(id)
	return pu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUsersID(id *int) *ProjectUpdate {
	if id != nil {
		pu = pu.SetUsersID(*id)
	}
	return pu
}

// SetUsers sets the "users" edge to the User entity.
func (pu *ProjectUpdate) SetUsers(u *User) *ProjectUpdate {
	return pu.SetUsersID(u.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (pu *ProjectUpdate) ClearUsers() *ProjectUpdate {
	pu.mutation.ClearUsers()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.Slug(); ok {
		if err := project.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Project.slug": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.UserID(); ok {
		if err := project.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Project.user_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Goal(); ok {
		if err := project.GoalValidator(v); err != nil {
			return &ValidationError{Name: "goal", err: fmt.Errorf(`ent: validator failed for field "Project.goal": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UUID(); ok {
		_spec.SetField(project.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(project.FieldUserID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUserID(); ok {
		_spec.AddField(project.FieldUserID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Goal(); ok {
		_spec.SetField(project.FieldGoal, field.TypeString, value)
	}
	if value, ok := pu.mutation.Shouldbe(); ok {
		_spec.SetField(project.FieldShouldbe, field.TypeString, value)
	}
	if pu.mutation.ShouldbeCleared() {
		_spec.ClearField(project.FieldShouldbe, field.TypeString)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Deadline(); ok {
		_spec.SetField(project.FieldDeadline, field.TypeTime, value)
	}
	if value, ok := pu.mutation.StartingAt(); ok {
		_spec.SetField(project.FieldStartingAt, field.TypeTime, value)
	}
	if pu.mutation.StartingAtCleared() {
		_spec.ClearField(project.FieldStartingAt, field.TypeTime)
	}
	if value, ok := pu.mutation.StartedAt(); ok {
		_spec.SetField(project.FieldStartedAt, field.TypeTime, value)
	}
	if pu.mutation.StartedAtCleared() {
		_spec.ClearField(project.FieldStartedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.FinishedAt(); ok {
		_spec.SetField(project.FieldFinishedAt, field.TypeTime, value)
	}
	if pu.mutation.FinishedAtCleared() {
		_spec.ClearField(project.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.ArchivedAt(); ok {
		_spec.SetField(project.FieldArchivedAt, field.TypeTime, value)
	}
	if pu.mutation.ArchivedAtCleared() {
		_spec.ClearField(project.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UsersTable,
			Columns: []string{project.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UsersTable,
			Columns: []string{project.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetUUID sets the "uuid" field.
func (puo *ProjectUpdateOne) SetUUID(u uuid.UUID) *ProjectUpdateOne {
	puo.mutation.SetUUID(u)
	return puo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUUID(u *uuid.UUID) *ProjectUpdateOne {
	if u != nil {
		puo.SetUUID(*u)
	}
	return puo
}

// SetSlug sets the "slug" field.
func (puo *ProjectUpdateOne) SetSlug(s string) *ProjectUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableSlug(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetSlug(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *ProjectUpdateOne) SetUserID(i int) *ProjectUpdateOne {
	puo.mutation.ResetUserID()
	puo.mutation.SetUserID(i)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUserID(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetUserID(*i)
	}
	return puo
}

// AddUserID adds i to the "user_id" field.
func (puo *ProjectUpdateOne) AddUserID(i int) *ProjectUpdateOne {
	puo.mutation.AddUserID(i)
	return puo
}

// SetGoal sets the "goal" field.
func (puo *ProjectUpdateOne) SetGoal(s string) *ProjectUpdateOne {
	puo.mutation.SetGoal(s)
	return puo
}

// SetNillableGoal sets the "goal" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGoal(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGoal(*s)
	}
	return puo
}

// SetShouldbe sets the "shouldbe" field.
func (puo *ProjectUpdateOne) SetShouldbe(s string) *ProjectUpdateOne {
	puo.mutation.SetShouldbe(s)
	return puo
}

// SetNillableShouldbe sets the "shouldbe" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableShouldbe(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetShouldbe(*s)
	}
	return puo
}

// ClearShouldbe clears the value of the "shouldbe" field.
func (puo *ProjectUpdateOne) ClearShouldbe() *ProjectUpdateOne {
	puo.mutation.ClearShouldbe()
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProjectUpdateOne) SetStatus(pr project.Status) *ProjectUpdateOne {
	puo.mutation.SetStatus(pr)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStatus(pr *project.Status) *ProjectUpdateOne {
	if pr != nil {
		puo.SetStatus(*pr)
	}
	return puo
}

// SetDeadline sets the "deadline" field.
func (puo *ProjectUpdateOne) SetDeadline(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetDeadline(t)
	return puo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDeadline(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetDeadline(*t)
	}
	return puo
}

// SetStartingAt sets the "starting_at" field.
func (puo *ProjectUpdateOne) SetStartingAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetStartingAt(t)
	return puo
}

// SetNillableStartingAt sets the "starting_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStartingAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetStartingAt(*t)
	}
	return puo
}

// ClearStartingAt clears the value of the "starting_at" field.
func (puo *ProjectUpdateOne) ClearStartingAt() *ProjectUpdateOne {
	puo.mutation.ClearStartingAt()
	return puo
}

// SetStartedAt sets the "started_at" field.
func (puo *ProjectUpdateOne) SetStartedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetStartedAt(t)
	return puo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStartedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetStartedAt(*t)
	}
	return puo
}

// ClearStartedAt clears the value of the "started_at" field.
func (puo *ProjectUpdateOne) ClearStartedAt() *ProjectUpdateOne {
	puo.mutation.ClearStartedAt()
	return puo
}

// SetFinishedAt sets the "finished_at" field.
func (puo *ProjectUpdateOne) SetFinishedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetFinishedAt(t)
	return puo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableFinishedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetFinishedAt(*t)
	}
	return puo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (puo *ProjectUpdateOne) ClearFinishedAt() *ProjectUpdateOne {
	puo.mutation.ClearFinishedAt()
	return puo
}

// SetArchivedAt sets the "archived_at" field.
func (puo *ProjectUpdateOne) SetArchivedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetArchivedAt(t)
	return puo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableArchivedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetArchivedAt(*t)
	}
	return puo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (puo *ProjectUpdateOne) ClearArchivedAt() *ProjectUpdateOne {
	puo.mutation.ClearArchivedAt()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (puo *ProjectUpdateOne) SetUsersID(id int) *ProjectUpdateOne {
	puo.mutation.SetUsersID(id)
	return puo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUsersID(id *int) *ProjectUpdateOne {
	if id != nil {
		puo = puo.SetUsersID(*id)
	}
	return puo
}

// SetUsers sets the "users" edge to the User entity.
func (puo *ProjectUpdateOne) SetUsers(u *User) *ProjectUpdateOne {
	return puo.SetUsersID(u.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (puo *ProjectUpdateOne) ClearUsers() *ProjectUpdateOne {
	puo.mutation.ClearUsers()
	return puo
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.Slug(); ok {
		if err := project.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Project.slug": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.UserID(); ok {
		if err := project.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Project.user_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Goal(); ok {
		if err := project.GoalValidator(v); err != nil {
			return &ValidationError{Name: "goal", err: fmt.Errorf(`ent: validator failed for field "Project.goal": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UUID(); ok {
		_spec.SetField(project.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(project.FieldUserID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUserID(); ok {
		_spec.AddField(project.FieldUserID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Goal(); ok {
		_spec.SetField(project.FieldGoal, field.TypeString, value)
	}
	if value, ok := puo.mutation.Shouldbe(); ok {
		_spec.SetField(project.FieldShouldbe, field.TypeString, value)
	}
	if puo.mutation.ShouldbeCleared() {
		_spec.ClearField(project.FieldShouldbe, field.TypeString)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Deadline(); ok {
		_spec.SetField(project.FieldDeadline, field.TypeTime, value)
	}
	if value, ok := puo.mutation.StartingAt(); ok {
		_spec.SetField(project.FieldStartingAt, field.TypeTime, value)
	}
	if puo.mutation.StartingAtCleared() {
		_spec.ClearField(project.FieldStartingAt, field.TypeTime)
	}
	if value, ok := puo.mutation.StartedAt(); ok {
		_spec.SetField(project.FieldStartedAt, field.TypeTime, value)
	}
	if puo.mutation.StartedAtCleared() {
		_spec.ClearField(project.FieldStartedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.FinishedAt(); ok {
		_spec.SetField(project.FieldFinishedAt, field.TypeTime, value)
	}
	if puo.mutation.FinishedAtCleared() {
		_spec.ClearField(project.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.ArchivedAt(); ok {
		_spec.SetField(project.FieldArchivedAt, field.TypeTime, value)
	}
	if puo.mutation.ArchivedAtCleared() {
		_spec.ClearField(project.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UsersTable,
			Columns: []string{project.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UsersTable,
			Columns: []string{project.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
