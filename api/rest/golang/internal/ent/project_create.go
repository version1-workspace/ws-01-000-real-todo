// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"version1-workspace/ws-01-000-real-todo/internal/ent/project"
	"version1-workspace/ws-01-000-real-todo/internal/ent/task"
	"version1-workspace/ws-01-000-real-todo/internal/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (pc *ProjectCreate) SetUUID(u uuid.UUID) *ProjectCreate {
	pc.mutation.SetUUID(u)
	return pc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUUID(u *uuid.UUID) *ProjectCreate {
	if u != nil {
		pc.SetUUID(*u)
	}
	return pc
}

// SetSlug sets the "slug" field.
func (pc *ProjectCreate) SetSlug(s string) *ProjectCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *ProjectCreate) SetUserID(i int) *ProjectCreate {
	pc.mutation.SetUserID(i)
	return pc
}

// SetGoal sets the "goal" field.
func (pc *ProjectCreate) SetGoal(s string) *ProjectCreate {
	pc.mutation.SetGoal(s)
	return pc
}

// SetShouldbe sets the "shouldbe" field.
func (pc *ProjectCreate) SetShouldbe(s string) *ProjectCreate {
	pc.mutation.SetShouldbe(s)
	return pc
}

// SetNillableShouldbe sets the "shouldbe" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableShouldbe(s *string) *ProjectCreate {
	if s != nil {
		pc.SetShouldbe(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProjectCreate) SetStatus(pr project.Status) *ProjectCreate {
	pc.mutation.SetStatus(pr)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableStatus(pr *project.Status) *ProjectCreate {
	if pr != nil {
		pc.SetStatus(*pr)
	}
	return pc
}

// SetDeadline sets the "deadline" field.
func (pc *ProjectCreate) SetDeadline(t time.Time) *ProjectCreate {
	pc.mutation.SetDeadline(t)
	return pc
}

// SetStartingAt sets the "starting_at" field.
func (pc *ProjectCreate) SetStartingAt(t time.Time) *ProjectCreate {
	pc.mutation.SetStartingAt(t)
	return pc
}

// SetNillableStartingAt sets the "starting_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableStartingAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetStartingAt(*t)
	}
	return pc
}

// SetStartedAt sets the "started_at" field.
func (pc *ProjectCreate) SetStartedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetStartedAt(t)
	return pc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableStartedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetStartedAt(*t)
	}
	return pc
}

// SetFinishedAt sets the "finished_at" field.
func (pc *ProjectCreate) SetFinishedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetFinishedAt(t)
	return pc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableFinishedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetFinishedAt(*t)
	}
	return pc
}

// SetArchivedAt sets the "archived_at" field.
func (pc *ProjectCreate) SetArchivedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetArchivedAt(t)
	return pc
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableArchivedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetArchivedAt(*t)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pc *ProjectCreate) SetOwnerID(id int) *ProjectCreate {
	pc.mutation.SetOwnerID(id)
	return pc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (pc *ProjectCreate) SetNillableOwnerID(id *int) *ProjectCreate {
	if id != nil {
		pc = pc.SetOwnerID(*id)
	}
	return pc
}

// SetOwner sets the "owner" edge to the User entity.
func (pc *ProjectCreate) SetOwner(u *User) *ProjectCreate {
	return pc.SetOwnerID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pc *ProjectCreate) AddTaskIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pc *ProjectCreate) AddTasks(t ...*Task) *ProjectCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.UUID(); !ok {
		v := project.DefaultUUID()
		pc.mutation.SetUUID(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := project.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Project.uuid"`)}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Project.slug"`)}
	}
	if v, ok := pc.mutation.Slug(); ok {
		if err := project.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Project.slug": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Project.user_id"`)}
	}
	if v, ok := pc.mutation.UserID(); ok {
		if err := project.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Project.user_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Goal(); !ok {
		return &ValidationError{Name: "goal", err: errors.New(`ent: missing required field "Project.goal"`)}
	}
	if v, ok := pc.mutation.Goal(); ok {
		if err := project.GoalValidator(v); err != nil {
			return &ValidationError{Name: "goal", err: fmt.Errorf(`ent: validator failed for field "Project.goal": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Project.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Deadline(); !ok {
		return &ValidationError{Name: "deadline", err: errors.New(`ent: missing required field "Project.deadline"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.UUID(); ok {
		_spec.SetField(project.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.SetField(project.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := pc.mutation.Goal(); ok {
		_spec.SetField(project.FieldGoal, field.TypeString, value)
		_node.Goal = value
	}
	if value, ok := pc.mutation.Shouldbe(); ok {
		_spec.SetField(project.FieldShouldbe, field.TypeString, value)
		_node.Shouldbe = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.Deadline(); ok {
		_spec.SetField(project.FieldDeadline, field.TypeTime, value)
		_node.Deadline = value
	}
	if value, ok := pc.mutation.StartingAt(); ok {
		_spec.SetField(project.FieldStartingAt, field.TypeTime, value)
		_node.StartingAt = &value
	}
	if value, ok := pc.mutation.StartedAt(); ok {
		_spec.SetField(project.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := pc.mutation.FinishedAt(); ok {
		_spec.SetField(project.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := pc.mutation.ArchivedAt(); ok {
		_spec.SetField(project.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_projects = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TasksTable,
			Columns: []string{project.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
