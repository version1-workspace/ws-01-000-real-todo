// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"version1-workspace/ws-01-000-real-todo/internal/ent/project"
	"version1-workspace/ws-01-000-real-todo/internal/ent/task"
	"version1-workspace/ws-01-000-real-todo/internal/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (tc *TaskCreate) SetUUID(u uuid.UUID) *TaskCreate {
	tc.mutation.SetUUID(u)
	return tc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUUID(u *uuid.UUID) *TaskCreate {
	if u != nil {
		tc.SetUUID(*u)
	}
	return tc
}

// SetTitle sets the "title" field.
func (tc *TaskCreate) SetTitle(s string) *TaskCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(t task.Status) *TaskCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(t *task.Status) *TaskCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetKind sets the "kind" field.
func (tc *TaskCreate) SetKind(t task.Kind) *TaskCreate {
	tc.mutation.SetKind(t)
	return tc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (tc *TaskCreate) SetNillableKind(t *task.Kind) *TaskCreate {
	if t != nil {
		tc.SetKind(*t)
	}
	return tc
}

// SetDeadline sets the "deadline" field.
func (tc *TaskCreate) SetDeadline(t time.Time) *TaskCreate {
	tc.mutation.SetDeadline(t)
	return tc
}

// SetStartingAt sets the "starting_at" field.
func (tc *TaskCreate) SetStartingAt(t time.Time) *TaskCreate {
	tc.mutation.SetStartingAt(t)
	return tc
}

// SetNillableStartingAt sets the "starting_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStartingAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetStartingAt(*t)
	}
	return tc
}

// SetStartedAt sets the "started_at" field.
func (tc *TaskCreate) SetStartedAt(t time.Time) *TaskCreate {
	tc.mutation.SetStartedAt(t)
	return tc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStartedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetStartedAt(*t)
	}
	return tc
}

// SetFinishedAt sets the "finished_at" field.
func (tc *TaskCreate) SetFinishedAt(t time.Time) *TaskCreate {
	tc.mutation.SetFinishedAt(t)
	return tc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableFinishedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetFinishedAt(*t)
	}
	return tc
}

// SetArchivedAt sets the "archived_at" field.
func (tc *TaskCreate) SetArchivedAt(t time.Time) *TaskCreate {
	tc.mutation.SetArchivedAt(t)
	return tc
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableArchivedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetArchivedAt(*t)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (tc *TaskCreate) SetProjectID(id int) *TaskCreate {
	tc.mutation.SetProjectID(id)
	return tc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableProjectID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetProjectID(*id)
	}
	return tc
}

// SetProject sets the "project" edge to the Project entity.
func (tc *TaskCreate) SetProject(p *Project) *TaskCreate {
	return tc.SetProjectID(p.ID)
}

// SetMilestoneParentID sets the "milestoneParent" edge to the Project entity by ID.
func (tc *TaskCreate) SetMilestoneParentID(id int) *TaskCreate {
	tc.mutation.SetMilestoneParentID(id)
	return tc
}

// SetNillableMilestoneParentID sets the "milestoneParent" edge to the Project entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableMilestoneParentID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetMilestoneParentID(*id)
	}
	return tc
}

// SetMilestoneParent sets the "milestoneParent" edge to the Project entity.
func (tc *TaskCreate) SetMilestoneParent(p *Project) *TaskCreate {
	return tc.SetMilestoneParentID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tc *TaskCreate) SetUserID(id int) *TaskCreate {
	tc.mutation.SetUserID(id)
	return tc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableUserID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetUserID(*id)
	}
	return tc
}

// SetUser sets the "user" edge to the User entity.
func (tc *TaskCreate) SetUser(u *User) *TaskCreate {
	return tc.SetUserID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.UUID(); !ok {
		v := task.DefaultUUID()
		tc.mutation.SetUUID(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := task.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.Kind(); !ok {
		v := task.DefaultKind
		tc.mutation.SetKind(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Task.uuid"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Task.title"`)}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Task.kind"`)}
	}
	if v, ok := tc.mutation.Kind(); ok {
		if err := task.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Task.kind": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Deadline(); !ok {
		return &ValidationError{Name: "deadline", err: errors.New(`ent: missing required field "Task.deadline"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.UUID(); ok {
		_spec.SetField(task.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Kind(); ok {
		_spec.SetField(task.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := tc.mutation.Deadline(); ok {
		_spec.SetField(task.FieldDeadline, field.TypeTime, value)
		_node.Deadline = value
	}
	if value, ok := tc.mutation.StartingAt(); ok {
		_spec.SetField(task.FieldStartingAt, field.TypeTime, value)
		_node.StartingAt = &value
	}
	if value, ok := tc.mutation.StartedAt(); ok {
		_spec.SetField(task.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := tc.mutation.FinishedAt(); ok {
		_spec.SetField(task.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := tc.mutation.ArchivedAt(); ok {
		_spec.SetField(task.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.MilestoneParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MilestoneParentTable,
			Columns: []string{task.MilestoneParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_milestones = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserTable,
			Columns: []string{task.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
